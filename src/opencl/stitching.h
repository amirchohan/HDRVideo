const char *stitching_kernel =
"\n"
"float weight(float luminance);\n"
"float getPixelLuminance(float3 pixel_val);\n"
"\n"
"kernel void stitch( __global float* LDRimages, __global float* exposures, __global float* HDRimage) {\n"
"	//this kernel takes num_images LDR images in input_images\n"
"	//and combines them together according to their exposures\n"
"\n"
"	int gid = get_global_id(0);	//id in the entire global memory\n"
"\n"
"	if (gid < image_size) {\n"
"	float weightedSum = 0;\n"
"	float3 hdr, ldr;\n"
"	hdr.x = hdr.y = hdr.z = 0;\n"
"	for (int i=0; i < num_images; i++) {\n"
"		ldr.x = LDRimages[i*image_size*4 + (gid*4 + 0)]*255.f;\n"
"		ldr.y = LDRimages[i*image_size*4 + (gid*4 + 1)]*255.f;\n"
"		ldr.z = LDRimages[i*image_size*4 + (gid*4 + 2)]*255.f;\n"
"\n"
"		float luminance = getPixelLuminance(ldr);\n"
"		float w = weight(luminance);\n"
"		float exposure = exposures[i];\n"
"\n"
"		hdr.x += (ldr.x/exposure) * w;\n"
"		hdr.y += (ldr.y/exposure) * w;\n"
"		hdr.z += (ldr.z/exposure) * w;\n"
"\n"
"		weightedSum += w;\n"
"	}\n"
"\n"
"	hdr.x = hdr.x/(weightedSum + 0.000001);\n"
"	hdr.y = hdr.y/(weightedSum + 0.000001);\n"
"	hdr.z = hdr.z/(weightedSum + 0.000001);\n"
"\n"
"	HDRimage[gid*4 + 0] = hdr.x/255.f;\n"
"	HDRimage[gid*4 + 1] = hdr.y/255.f;\n"
"	HDRimage[gid*4 + 2] = hdr.z/255.f;\n"
"	HDRimage[gid*4 + 3] = getPixelLuminance(hdr);\n"
"	}\n"
"}\n"
"\n"
"float weight(float luminance) {\n"
"	if (luminance < 0.5) return luminance*2.0;\n"
"	else return (1.0 - luminance)*2.0;\n"
"}\n"
"\n"
"float getPixelLuminance(float3 pixel_val) {\n"
"	return pixel_val.x*0.2126 + pixel_val.y*0.7152 + pixel_val.z*0.0722;\n"
"}\n";
