const char *reinhardGlobal_kernel =
"\n"
"float3 RGBtoXYZ(float3 rgb);\n"
"\n"
"//this kernel computes logAvgLum and Lwhite by performing reduction\n"
"//the results are stored in an array of size num_work_groups\n"
"kernel void computeLogAvgLum( 	__global float* image,\n"
"								__global float* logAvgLum,\n"
"								__global float* Lwhite,\n"
"								__local float* Lwhite_loc,\n"
"								__local float* logAvgLum_loc) {\n"
"\n"
"\n"
"	const int gid = get_global_id(0);	//id in the entire global memory\n"
"	const int global_size = get_global_size(0);\n"
"\n"
"	float lum;\n"
"	float Lwhite_acc = 0.f;		//maximum luminance in the image\n"
"	float logAvgLum_acc = 0.f;\n"
"\n"
"	for (int i=gid; i < image_size; i+=global_size) {\n"
"		lum = image[i*NUM_CHANNELS + 0]*0.2126 + image[i*NUM_CHANNELS + 1]*0.7152 + image[i*NUM_CHANNELS + 2]*0.0722;\n"
"\n"
"		Lwhite_acc = (lum > Lwhite_acc) ? lum : Lwhite_acc;\n"
"		logAvgLum_acc += log(lum + 0.000001);\n"
"	}\n"
"\n"
"\n"
"	const int lid = get_local_id(0);	//id within the work group\n"
"	Lwhite_loc[lid] = Lwhite_acc;\n"
"	logAvgLum_loc[lid] = logAvgLum_acc;\n"
"\n"
"	// Perform parallel reduction\n"
"	barrier(CLK_LOCAL_MEM_FENCE);\n"
"\n"
"	for(int offset = get_local_size(0)/2; offset > 0; offset = offset/2) {\n"
"		if (lid < offset) {\n"
"			Lwhite_loc[lid] = (Lwhite_loc[lid+offset] > Lwhite_loc[lid]) ? Lwhite_loc[lid+offset] : Lwhite_loc[lid];\n"
"			logAvgLum_loc[lid] += logAvgLum_loc[lid + offset];\n"
"		}\n"
"		barrier(CLK_LOCAL_MEM_FENCE);\n"
"	}\n"
"\n"
"	const int group_id = get_group_id(0);\n"
"	if (lid == 0) {\n"
"		Lwhite[group_id] = Lwhite_loc[0];\n"
"		logAvgLum[group_id] = logAvgLum_loc[0];\n"
"	}\n"
"}\n"
"\n"
"kernel void global_TMO( __global float* input,\n"
"						__global float* output,\n"
"						__global float* logAvgLum_acc,\n"
"						__global float* Lwhite_acc,\n"
"						const float key,\n"
"						const float sat,\n"
"						const unsigned int num_reduc_bins) {\n"
"\n"
"\n"
"	float Lwhite = 0.f;\n"
"	float logAvgLum = 0.f;\n"
"	for (int i=0; i<num_reduc_bins; i++) {\n"
"		if (Lwhite < Lwhite_acc[i]) Lwhite = Lwhite_acc[i];\n"
"		logAvgLum += logAvgLum_acc[i];\n"
"	}\n"
"	logAvgLum = exp(logAvgLum/image_size);\n"
"\n"
"	const int gid = get_global_id(0);\n"
"	if (gid < image_size) {\n"
"		float3 rgb, xyz;\n"
"		rgb.x = input[gid*NUM_CHANNELS + 0];\n"
"		rgb.y = input[gid*NUM_CHANNELS + 1];\n"
"		rgb.z = input[gid*NUM_CHANNELS + 2];\n"
"\n"
"		xyz = RGBtoXYZ(rgb);\n"
"\n"
"		float L\t= (key/logAvgLum) * xyz.y;\n"
"		float Ld = (L * (1.0 + L/(Lwhite * Lwhite)) )/(1.0 + L);\n"
"\n"
"		output[gid*NUM_CHANNELS + 0] = clamp(pow(rgb.x/xyz.y, sat) * Ld, 0.f, 1.f);\n"
"		output[gid*NUM_CHANNELS + 1] = clamp(pow(rgb.y/xyz.y, sat) * Ld, 0.f, 1.f);\n"
"		output[gid*NUM_CHANNELS + 2] = clamp(pow(rgb.z/xyz.y, sat) * Ld, 0.f, 1.f);\n"
"	}\n"
"}\n"
"\n"
"float3 RGBtoXYZ(float3 rgb) {\n"
"	float3 xyz;\n"
"	xyz.x = rgb.x*0.4124 + rgb.y*0.3576 + rgb.z*0.1805;\n"
"	xyz.y = rgb.x*0.2126 + rgb.y*0.7152 + rgb.z*0.0722;\n"
"	xyz.z = rgb.x*0.0193 + rgb.y*0.1192 + rgb.z*0.9505;\n"
"	return xyz;\n"
"}\n";
